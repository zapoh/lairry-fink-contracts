/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface DtfFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "bytecodeContract"
      | "createFund"
      | "defaultDeadlineOffset"
      | "deployedFunds"
      | "getAllFunds"
      | "getFundCount"
      | "getFundsCreatedBy"
      | "isFund"
      | "predictFundAddress"
      | "uniswapRouterAddress"
      | "userFunds"
      | "wethAddress"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "FundCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "bytecodeContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createFund",
    values: [
      string,
      string,
      boolean,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultDeadlineOffset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployedFunds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFundCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFundsCreatedBy",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "isFund", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "predictFundAddress",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapRouterAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userFunds",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "wethAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "bytecodeContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createFund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "defaultDeadlineOffset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployedFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFundCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFundsCreatedBy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isFund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "predictFundAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapRouterAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userFunds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "wethAddress",
    data: BytesLike
  ): Result;
}

export namespace FundCreatedEvent {
  export type InputTuple = [
    fundAddress: AddressLike,
    creator: AddressLike,
    name: string,
    symbol: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    fundAddress: string,
    creator: string,
    name: string,
    symbol: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    fundAddress: string;
    creator: string;
    name: string;
    symbol: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DtfFactory extends BaseContract {
  connect(runner?: ContractRunner | null): DtfFactory;
  waitForDeployment(): Promise<this>;

  interface: DtfFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  bytecodeContract: TypedContractMethod<[], [string], "view">;

  createFund: TypedContractMethod<
    [
      _shareName: string,
      _shareSymbol: string,
      _depositsEnabled: boolean,
      _minimumDeposit: BigNumberish,
      _slippageTolerance: BigNumberish,
      _depositFee: BigNumberish,
      _withdrawalFee: BigNumberish
    ],
    [string],
    "nonpayable"
  >;

  defaultDeadlineOffset: TypedContractMethod<[], [bigint], "view">;

  deployedFunds: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getAllFunds: TypedContractMethod<[], [string[]], "view">;

  getFundCount: TypedContractMethod<[], [bigint], "view">;

  getFundsCreatedBy: TypedContractMethod<
    [_user: AddressLike],
    [string[]],
    "view"
  >;

  isFund: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  predictFundAddress: TypedContractMethod<
    [_shareName: string, _shareSymbol: string],
    [string],
    "view"
  >;

  uniswapRouterAddress: TypedContractMethod<[], [string], "view">;

  userFunds: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  wethAddress: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "bytecodeContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createFund"
  ): TypedContractMethod<
    [
      _shareName: string,
      _shareSymbol: string,
      _depositsEnabled: boolean,
      _minimumDeposit: BigNumberish,
      _slippageTolerance: BigNumberish,
      _depositFee: BigNumberish,
      _withdrawalFee: BigNumberish
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "defaultDeadlineOffset"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deployedFunds"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getAllFunds"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getFundCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getFundsCreatedBy"
  ): TypedContractMethod<[_user: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "isFund"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "predictFundAddress"
  ): TypedContractMethod<
    [_shareName: string, _shareSymbol: string],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "uniswapRouterAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "userFunds"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "wethAddress"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "FundCreated"
  ): TypedContractEvent<
    FundCreatedEvent.InputTuple,
    FundCreatedEvent.OutputTuple,
    FundCreatedEvent.OutputObject
  >;

  filters: {
    "FundCreated(address,address,string,string,uint256)": TypedContractEvent<
      FundCreatedEvent.InputTuple,
      FundCreatedEvent.OutputTuple,
      FundCreatedEvent.OutputObject
    >;
    FundCreated: TypedContractEvent<
      FundCreatedEvent.InputTuple,
      FundCreatedEvent.OutputTuple,
      FundCreatedEvent.OutputObject
    >;
  };
}
