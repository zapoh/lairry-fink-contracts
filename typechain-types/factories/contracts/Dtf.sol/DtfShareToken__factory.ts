/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  DtfShareToken,
  DtfShareTokenInterface,
} from "../../../contracts/Dtf.sol/DtfShareToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_shareTokenName",
        type: "string",
      },
      {
        internalType: "string",
        name: "_shareTokenSymbol",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allowance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC20InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC20InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSpender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610c95380380610c9583398101604081905261002f9161019d565b338282600361003e838261028b565b50600461004b828261028b565b5050506001600160a01b03811661007c57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6100858161008d565b50505061034a565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261010657600080fd5b81516001600160401b0380821115610120576101206100df565b604051601f8301601f19908116603f01168101908282118183101715610148576101486100df565b816040528381526020925086602085880101111561016557600080fd5b600091505b83821015610187578582018301518183018401529082019061016a565b6000602085830101528094505050505092915050565b600080604083850312156101b057600080fd5b82516001600160401b03808211156101c757600080fd5b6101d3868387016100f5565b935060208501519150808211156101e957600080fd5b506101f6858286016100f5565b9150509250929050565b600181811c9082168061021457607f821691505b60208210810361023457634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610286576000816000526020600020601f850160051c810160208610156102635750805b601f850160051c820191505b818110156102825782815560010161026f565b5050505b505050565b81516001600160401b038111156102a4576102a46100df565b6102b8816102b28454610200565b8461023a565b602080601f8311600181146102ed57600084156102d55750858301515b600019600386901b1c1916600185901b178555610282565b600085815260208120601f198616915b8281101561031c578886015182559484019460019091019084016102fd565b508582101561033a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61093c806103596000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063715018a61161008c5780639dc29fac116100665780639dc29fac146101cd578063a9059cbb146101e0578063dd62ed3e146101f3578063f2fde38b1461022c57600080fd5b8063715018a6146101a25780638da5cb5b146101aa57806395d89b41146101c557600080fd5b806323b872dd116100c857806323b872dd14610142578063313ce5671461015557806340c10f191461016457806370a082311461017957600080fd5b806306fdde03146100ef578063095ea7b31461010d57806318160ddd14610130575b600080fd5b6100f761023f565b6040516101049190610785565b60405180910390f35b61012061011b3660046107f0565b6102d1565b6040519015158152602001610104565b6002545b604051908152602001610104565b61012061015036600461081a565b6102eb565b60405160008152602001610104565b6101776101723660046107f0565b61030f565b005b610134610187366004610856565b6001600160a01b031660009081526020819052604090205490565b610177610325565b6005546040516001600160a01b039091168152602001610104565b6100f7610339565b6101776101db3660046107f0565b610348565b6101206101ee3660046107f0565b61035a565b610134610201366004610878565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b61017761023a366004610856565b610368565b60606003805461024e906108ab565b80601f016020809104026020016040519081016040528092919081815260200182805461027a906108ab565b80156102c75780601f1061029c576101008083540402835291602001916102c7565b820191906000526020600020905b8154815290600101906020018083116102aa57829003601f168201915b5050505050905090565b6000336102df8185856103ab565b60019150505b92915050565b6000336102f98582856103bd565b61030485858561043c565b506001949350505050565b61031761049b565b61032182826104c8565b5050565b61032d61049b565b61033760006104fe565b565b60606004805461024e906108ab565b61035061049b565b6103218282610550565b6000336102df81858561043c565b61037061049b565b6001600160a01b03811661039f57604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b6103a8816104fe565b50565b6103b88383836001610586565b505050565b6001600160a01b03838116600090815260016020908152604080832093861683529290522054600019811015610436578181101561042757604051637dc7a0d960e11b81526001600160a01b03841660048201526024810182905260448101839052606401610396565b61043684848484036000610586565b50505050565b6001600160a01b03831661046657604051634b637e8f60e11b815260006004820152602401610396565b6001600160a01b0382166104905760405163ec442f0560e01b815260006004820152602401610396565b6103b883838361065b565b6005546001600160a01b031633146103375760405163118cdaa760e01b8152336004820152602401610396565b6001600160a01b0382166104f25760405163ec442f0560e01b815260006004820152602401610396565b6103216000838361065b565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b03821661057a57604051634b637e8f60e11b815260006004820152602401610396565b6103218260008361065b565b6001600160a01b0384166105b05760405163e602df0560e01b815260006004820152602401610396565b6001600160a01b0383166105da57604051634a1406b160e11b815260006004820152602401610396565b6001600160a01b038085166000908152600160209081526040808320938716835292905220829055801561043657826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161064d91815260200190565b60405180910390a350505050565b6001600160a01b03831661068657806002600082825461067b91906108e5565b909155506106f89050565b6001600160a01b038316600090815260208190526040902054818110156106d95760405163391434e360e21b81526001600160a01b03851660048201526024810182905260448101839052606401610396565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b03821661071457600280548290039055610733565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161077891815260200190565b60405180910390a3505050565b60006020808352835180602085015260005b818110156107b357858101830151858201604001528201610797565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b03811681146107eb57600080fd5b919050565b6000806040838503121561080357600080fd5b61080c836107d4565b946020939093013593505050565b60008060006060848603121561082f57600080fd5b610838846107d4565b9250610846602085016107d4565b9150604084013590509250925092565b60006020828403121561086857600080fd5b610871826107d4565b9392505050565b6000806040838503121561088b57600080fd5b610894836107d4565b91506108a2602084016107d4565b90509250929050565b600181811c908216806108bf57607f821691505b6020821081036108df57634e487b7160e01b600052602260045260246000fd5b50919050565b808201808211156102e557634e487b7160e01b600052601160045260246000fdfea26469706673582212209466b2dc58d0a615448eefc125dd410e0ed2360e9875530e185d17b56db8be6a64736f6c63430008190033";

type DtfShareTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DtfShareTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DtfShareToken__factory extends ContractFactory {
  constructor(...args: DtfShareTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _shareTokenName: string,
    _shareTokenSymbol: string,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _shareTokenName,
      _shareTokenSymbol,
      overrides || {}
    );
  }
  override deploy(
    _shareTokenName: string,
    _shareTokenSymbol: string,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      _shareTokenName,
      _shareTokenSymbol,
      overrides || {}
    ) as Promise<
      DtfShareToken & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): DtfShareToken__factory {
    return super.connect(runner) as DtfShareToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DtfShareTokenInterface {
    return new Interface(_abi) as DtfShareTokenInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): DtfShareToken {
    return new Contract(address, _abi, runner) as unknown as DtfShareToken;
  }
}
